template("gcc_toolchain") {
  assert(defined(invoker.cc), "gcc_toolchain must spectify a 'cc' value.")
  assert(defined(invoker.cxx), "gcc_toolchain must spectify a 'cxx' value.")
  assert(defined(invoker.ar), "gcc_toolchain must spectify a 'ar' value.")
  assert(defined(invoker.as), "gcc_toolchain must spectify a 'as' value.")
  assert(defined(invoker.ld), "gcc_toolchain must spectify a 'ld' value.")

  toolchain(target_name) {
    cc = invoker.cc
    cxx = invoker.cxx
    ar = invoker.ar
    as = invoker.as
    ld = invoker.ld

    #nm="llvm-nm"
    #readelf="llvm-readelf"

    tool("cc") {
      command = "$cc {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      description = "CC {{output}}"
      depsformat = "gcc"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }
    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$cxx {{defines}} {{include_dirs}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }
    tool("asm") {
      depfile = "{{output}}.d"
      command = "$as {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
      description = "ASM {{output}}"
      depsformat = "gcc"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }
    tool("alink") {
      outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      rspfile = "{{output}}.rsp"
      rspfile_content = "{{inputs}}"
      command = "$ar -cr {{output}} @\"$rspfile\""
      description = "ALINK {{output}}"
      outputs = [ outfile ]
      default_output_dir = "{{root_out_dir}}/libs"
      default_output_extension = ".a"
      output_prefix = "lib"
    }
    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
      sofile = "{{output_dir}}/$soname"  # Possibly including toolchain dir.
      rspfile = sofile + ".rsp"

      #soname_flag = "-Wl,-soname=\"$soname\""
      soname_flag = ""
      command =
          "$ld -shared $soname_flag {{ldflags}} -o \"$sofile\" @\"$rspfile\""
      rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}} -Wl,--whole-archive {{rlibs}} -Wl,--no-whole-archive"
      description = "SOLINK $sofile"
      default_output_dir = "{{root_out_dir}}"

      #if (is_win) {
      # default_output_extension = ".dll"
      #} else {
      default_output_extension = ".so"

      #}

      #output_prefix = "lib"

      # Since the above commands only updates the .TOC file when it changes, ask
      # Ninja to check if the timestamp actually changed to know if downstream
      # dependencies should be recompiled.
      restat = true

      # Tell GN about the output files. It will link to the sofile but use the
      # tocfile for dependency management.
      outputs = [ sofile ]
      link_output = sofile
      depend_output = sofile
    }
    tool("solink_module") {
      soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
      sofile = "{{output_dir}}/$soname"
      rspfile = sofile + ".rsp"

      #soname_flag = "-Wl,-soname=\"$soname\""
      soname_flag = ""

      #whole_archive_flag = "-Wl,--whole-archive"
      #no_whole_archive_flag = "-Wl,--no-whole-archive"
      whole_archive_flag = ""
      no_whole_archive_flag = ""
      command =
          "$ld -shared {{ldflags}} -o \"$sofile\" $soname_flag @\"$rspfile\""
      rspfile_content = "$whole_archive_flag {{inputs}} {{solibs}} $no_whole_archive_flag {{libs}} $whole_archive_flag {{rlibs}} $no_whole_archive_flag"
      description = "SOLINK_MODULE $sofile"
      default_output_dir = "{{root_out_dir}}"

      #if (is_win) {
      # default_output_extension = ".dll"
      #} else {
      default_output_extension = ".so"

      #}

      #output_prefix = "lib"
      outputs = [ sofile ]
    }
    tool("link") {
      exename = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/$exename"
      rspfile = "$outfile.rsp"
      default_output_dir = "{{root_out_dir}}"
      start_group_flag = "-Wl,--start-group"
      end_group_flag = "-Wl,--end-group "
      link_command = "$ld {{ldflags}} -o \"$outfile\" $start_group_flag @\"$rspfile\" {{solibs}} $end_group_flag {{libs}}"
      command = "$link_command"
      description = "LINK $outfile"

      #whole_archive_flag = "-Wl,--whole-archive"
      #no_whole_archive_flag = "-Wl,--no-whole-archive"
      whole_archive_flag = ""
      no_whole_archive_flag = ""
      rspfile_content =
          "{{inputs}} $whole_archive_flag {{rlibs}} $no_whole_archive_flag "
      outputs = [ outfile ]
    }
    tool("stamp") {
      command = "/usr/bin/touch {{output}}"
      if (is_win) {
        command = "cmd /c type nul > \"{{output}}\""
      }
      description = "STAMP {{output}}"
    }
    tool("copy") {
      command = "cp -afd {{source}} {{output}}"
      description = "COPY {{source}} {{output}}"
    }
  }
}

template("rust_toolchain") {
  assert(defined(invoker.rc), "rust_toolchain must spectify a 'rc' value.")
  toolchain(target_name) {
    rc = invoker.rc

    tool("rust_bin") {
      #depfile = "{{target_out_dir}}/{{crate_name}}.d"
      depfile = "{{output}}.d"
      outfile = "{{target_out_dir}}/{{crate_name}}"
      if (is_win) {
        outfile += ".exe"
      }
      command = "$rc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
      description = "RUST $outfile"
      outputs = [ outfile ]
    }
    tool("rust_staticlib") {
      depfile = "{{output}}.d"

      #depfile = "{{target_out_dir}}/{{crate_name}}.d"
      outfile = "{{target_out_dir}}/{{crate_name}}.a"
      command = "$rc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
      description = "RUST $outfile"
      outputs = [ outfile ]
    }
    tool("rust_rlib") {
      depfile = "{{output}}.d"

      #depfile = "{{target_out_dir}}/{{crate_name}}.d"
      outfile = "{{target_out_dir}}/lib{{crate_name}}.rlib"
      command = "$rc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
      description = "RUST $outfile"
      outputs = [ outfile ]

      #outputs =
      #    [ "{{output_dir}}/lib{{target_output_name}}{{output_extension}}" ]
      #default_output_dir = "{{target_out_dir}}"
      #default_output_extension = ".rlib"
      #output_prefix = "rlib"
    }
    tool("rust_dylib") {
      depfile = "{{output}}.d"

      #depfile = "{{target_out_dir}}/{{crate_name}}.d"
      outfile = "{{target_out_dir}}/lib{{crate_name}}.rlib"
      command = "$rc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
      description = "RUST {{output}}"
      default_output_dir = "{{root_out_dir}}/rust-shared"
      output_prefix = ".rlib"
    }
    tool("rust_cdylib") {
      depfile = "{{output}}.d"
      outfile = "{{target_out_dir}}/lib{{crate_name}}.so"
      command = "$rc --crate-name {{crate_name}} {{source}} --crate-type {{crate_type}} --emit=dep-info=$depfile,link -Z dep-info-omit-d-target {{rustflags}} -o $outfile {{rustdeps}} {{externs}}"
      description = "RUST $outfile"
      outputs = [ outfile ]
      default_output_dir = "{{root_out_dir}}/rust-shared"
      output_prefix = ".so"

      #restat = true
    }
    tool("stamp") {
      command = "touch {{output}}"
      if (is_win) {
        command = "cmd /c type nul > \"{{output}}\""
      }
      description = "STAMP {{output}}"
    }
    tool("copy") {
      command = "cp -af {{source}} {{output}}"
      description = "COPY {{source}} {{output}}"
    }
  }
}
